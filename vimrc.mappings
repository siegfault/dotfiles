nmap <silent> <leader>n :set nu!<CR>:set rnu!<CR> " Toggle Numbers
nmap <silent> <leader>r :set rnu!<CR>             " Toggle Relative Numbers
nmap <Leader>pg :set syntax=pgsql<cr>

map <Leader>* :Rg <cword><CR>
map <Leader>x :nohlsearch<CR>

nnoremap & :&&<CR>
xnoremap & :&&<CR>

nnoremap <leader>f za " Folding

" Scroll through history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Expand current path
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>" " Completion

" Split lines
map K i<Enter><Esc>

" Co-author
command! -nargs=+ Coauth :r!git log -n1000 --pretty=format:"\%an <\%ae>" | grep -i '<args>' | head -1 | xargs echo "Co-authored-by:"

" Allow <Alt-> modifiers
" https://github.com/matze/vim-move/issues/15#issuecomment-168177827
" for terms that send Alt as Escape sequence
" see http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
" for why the <F20> hack. Keeps Esc from waiting for other keys to exit visual
set <F20>=j
set <F21>=k
vmap <F20> <Plug>MoveBlockDown
vmap <F21> <Plug>MoveBlockUp
nmap <F20> <Plug>MoveLineDown
nmap <F21> <Plug>MoveLineUp

" Wrap
let s:wrapenabled = 0
function! ToggleWrap()
  set wrap
  if s:wrapenabled
    set nolinebreak
    unmap j
    unmap k
    unmap 0
    unmap ^
    unmap $
    let s:wrapenabled = 0
  else
    set linebreak
    nnoremap j gj
    nnoremap k gk
    nnoremap 0 g0
    nnoremap ^ g^
    nnoremap $ g$
    vnoremap j gj
    vnoremap k gk
    vnoremap 0 g0
    vnoremap ^ g^
    vnoremap $ g$
    let s:wrapenabled = 1
  endif
endfunction
map <leader>w :call ToggleWrap()<CR>
